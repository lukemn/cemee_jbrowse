'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _parser$string$uint, _parser, _parser$uint32$uint, _parser$string$uint2, _parser$string$uint3;

var _binaryUtils = require('./binaryUtils');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var linearDefaultBinWidth = 8000;
var linearChromIndex = (_parser$string$uint = (0, _binaryUtils.parser)().string('name', { zeroTerminated: true }).uint32('binWidth', {
  formatter: function formatter(w) {
    return w || linearDefaultBinWidth;
  }
}).uint32('numBins').uint32('longestFeature').uint32('isOldV3Index', {
  // a nonzero largest block size indicates that this is an older V3 tribble linear index
  formatter: function formatter(largestBlockSize) {
    return largestBlockSize > 0;
  }
}).uint32('numFeatures')).array.apply(_parser$string$uint, _toConsumableArray((0, _binaryUtils.readLongFromArray)('startPosition'))).array('blocks', {
  type: (_parser = (0, _binaryUtils.parser)()).array.apply(_parser, _toConsumableArray((0, _binaryUtils.readLongFromArray)('position'))),
  length: 'numBins'
});

var linearParser = (0, _binaryUtils.parser)().uint32('numChromosomes').array('chromosomes', {
  type: linearChromIndex,
  length: 'numChromosomes'
});

var treeParser = (0, _binaryUtils.parser)().uint32('numChromosomes').string('name', { zeroTerminated: true }).uint32('numIntervals').array('intervals', {
  type: (_parser$uint32$uint = (0, _binaryUtils.parser)().uint32('start').uint32('end')).array.apply(_parser$uint32$uint, _toConsumableArray((0, _binaryUtils.readLongFromArray)('pos'))).uint32('size'),
  length: 'numIntervals'
});

var headerParser = (_parser$string$uint2 = (_parser$string$uint3 = (0, _binaryUtils.parser)().string('magic', { length: 4 }).uint32('type').uint32('version', {
  formatter: function formatter(ver) {
    if (ver !== 3) throw new Error('only version 3 Tribble indexes are supported, this index is version ' + ver);
    return ver;
  }
}).string('fileName', { zeroTerminated: true })).array.apply(_parser$string$uint3, _toConsumableArray((0, _binaryUtils.readLongFromArray)('fileSize')))).array.apply(_parser$string$uint2, _toConsumableArray((0, _binaryUtils.readLongFromArray)('fileTimestamp'))).string('fileMD5', { zeroTerminated: true }).int32('flags').int32('numProperties').array('properties', {
  type: (0, _binaryUtils.parser)().string('key', { zeroTerminated: true }).string('val', { zeroTerminated: true }),
  length: 'numProperties'
});

var indexParser = headerParser.choice(null, {
  tag: 'type',
  choices: {
    1: linearParser,
    2: treeParser
  }
});

exports.default = indexParser;