"use strict";var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require("babel-runtime/helpers/createClass");var _createClass3 = _interopRequireDefault(_createClass2);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // little class representing a chunk in the index
var Chunk = function () {
  /**
                          * @param {VirtualOffset} minv
                          * @param {VirtualOffset} maxv
                          * @param {number} bin
                          * @param {number} [fetchedSize]
                          */
  function Chunk(minv, maxv, bin, fetchedSize) {(0, _classCallCheck3.default)(this, Chunk);
    this.minv = minv;
    this.maxv = maxv;

    this.bin = bin;
    this._fetchedSize = fetchedSize;
  }(0, _createClass3.default)(Chunk, [{ key: "toUniqueString", value: function toUniqueString()
    {
      return this.minv + ".." + this.maxv + " (bin " +
      this.bin + ", fetchedSize " +
      this.fetchedSize() + ")";
    } }, { key: "toString", value: function toString()
    {
      return this.toUniqueString();
    } }, { key: "compareTo", value: function compareTo(
    b) {
      return (
        this.minv.compareTo(b.minv) ||
        this.maxv.compareTo(b.maxv) ||
        this.bin - b.bin);

    } }, { key: "fetchedSize", value: function fetchedSize()
    {
      if (this._fetchedSize !== undefined) return this._fetchedSize;
      return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition;
    } }]);return Chunk;}();


module.exports = Chunk;