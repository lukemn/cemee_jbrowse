'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; (0, _defineProperty2.default)(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _localFile = require('./localFile');

var _localFile2 = _interopRequireDefault(_localFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _promise2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _promise2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _faiOffset(idx, pos) {
  return idx.offset + idx.lineBytes * Math.floor(pos / idx.lineLength) + pos % idx.lineLength;
}

var IndexedFasta = function () {
  function IndexedFasta(_ref) {
    var fasta = _ref.fasta,
        fai = _ref.fai,
        path = _ref.path,
        faiPath = _ref.faiPath,
        _ref$chunkSizeLimit = _ref.chunkSizeLimit,
        chunkSizeLimit = _ref$chunkSizeLimit === undefined ? 1000000 : _ref$chunkSizeLimit;

    _classCallCheck(this, IndexedFasta);

    if (fasta) {
      this.fasta = fasta;
    } else if (path) {
      this.fasta = new _localFile2.default(path);
    }

    if (fai) {
      this.fai = fai;
    } else if (faiPath) {
      this.fai = new _localFile2.default(faiPath);
    } else if (path) {
      this.fai = new _localFile2.default(path + '.fai');
    }
    this.chunkSizeLimit = chunkSizeLimit;
  }

  _createClass(IndexedFasta, [{
    key: '_getIndexes',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.indexes) {
                  _context.next = 4;
                  break;
                }

                _context.next = 3;
                return this._readFAI();

              case 3:
                this.indexes = _context.sent;

              case 4:
                return _context.abrupt('return', this.indexes);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _getIndexes() {
        return _ref2.apply(this, arguments);
      }

      return _getIndexes;
    }()
  }, {
    key: '_readFAI',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var indexByName, indexById, text, idCounter, currSeq;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                indexByName = {};
                indexById = {};
                _context2.next = 4;
                return this.fai.readFile();

              case 4:
                text = _context2.sent;

                if (text && text.length) {
                  _context2.next = 7;
                  break;
                }

                throw new Error('No data read from FASTA index (FAI) file');

              case 7:
                idCounter = 0;
                currSeq = void 0;

                text.toString('utf8').split(/\r?\n/).filter(function (line) {
                  return (/\S/.test(line)
                  );
                }).forEach(function (line) {
                  var row = line.split('\t');
                  if (row[0] === '') return;

                  if (!currSeq || currSeq.name !== row[0]) {
                    currSeq = { name: row[0], id: idCounter };
                    idCounter += 1;
                  }

                  var entry = {
                    id: currSeq.id,
                    name: row[0],
                    length: +row[1],
                    start: 0,
                    end: +row[1],
                    offset: +row[2],
                    lineLength: +row[3],
                    lineBytes: +row[4]
                  };
                  indexByName[entry.name] = entry;
                  indexById[entry.id] = entry;
                });

                return _context2.abrupt('return', { name: indexByName, id: indexById });

              case 11:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _readFAI() {
        return _ref3.apply(this, arguments);
      }

      return _readFAI;
    }()

    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */

  }, {
    key: 'getSequenceList',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = _values2.default;
                _context3.next = 3;
                return this._getIndexes();

              case 3:
                _context3.t1 = _context3.sent.id;

                _context3.t2 = function (value) {
                  return value.name;
                };

                return _context3.abrupt('return', (0, _context3.t0)(_context3.t1).map(_context3.t2));

              case 6:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getSequenceList() {
        return _ref4.apply(this, arguments);
      }

      return getSequenceList;
    }()

    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */

  }, {
    key: 'getSequenceNames',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.t0 = _keys2.default;
                _context4.next = 3;
                return this._getIndexes();

              case 3:
                _context4.t1 = _context4.sent.id;
                return _context4.abrupt('return', (0, _context4.t0)(_context4.t1));

              case 5:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getSequenceNames() {
        return _ref5.apply(this, arguments);
      }

      return getSequenceNames;
    }()
    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */

  }, {
    key: 'getSequenceSizes',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var returnObject, idx, vals, i;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                returnObject = {};
                _context5.next = 3;
                return this._getIndexes();

              case 3:
                idx = _context5.sent;
                vals = (0, _values2.default)(idx.id);

                for (i = 0; i < vals.length; i += 1) {
                  returnObject[vals[i].name] = vals[i].length;
                }
                return _context5.abrupt('return', returnObject);

              case 7:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getSequenceSizes() {
        return _ref6.apply(this, arguments);
      }

      return getSequenceSizes;
    }()

    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */

  }, {
    key: 'getSequenceSize',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee6(seqName) {
        var idx;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._getIndexes();

              case 2:
                idx = _context6.sent;
                return _context6.abrupt('return', idx.name[seqName].length);

              case 4:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getSequenceSize(_x) {
        return _ref7.apply(this, arguments);
      }

      return getSequenceSize;
    }()

    /**
     *
     * @param {string} name
     * @returns {Promise[boolean]} true if the file contains the given reference sequence name
     */

  }, {
    key: 'hasReferenceSequence',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee7(name) {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._getIndexes();

              case 2:
                _context7.t0 = name;
                return _context7.abrupt('return', !!_context7.sent.name[_context7.t0]);

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function hasReferenceSequence(_x2) {
        return _ref8.apply(this, arguments);
      }

      return hasReferenceSequence;
    }()

    /**
     *
     * @param {number} seqId
     * @param {number} min
     * @param {number} max
     */

  }, {
    key: 'getResiduesById',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee8(seqId, min, max) {
        var indexEntry;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._getIndexes();

              case 2:
                _context8.t0 = seqId;
                indexEntry = _context8.sent.id[_context8.t0];

                if (indexEntry) {
                  _context8.next = 6;
                  break;
                }

                return _context8.abrupt('return', undefined);

              case 6:
                return _context8.abrupt('return', this._fetchFromIndexEntry(indexEntry, min, max));

              case 7:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getResiduesById(_x3, _x4, _x5) {
        return _ref9.apply(this, arguments);
      }

      return getResiduesById;
    }()

    /**
     * @param {string} seqName
     * @param {number} min
     * @param {number} max
     */

  }, {
    key: 'getResiduesByName',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee9(seqName, min, max) {
        var indexEntry;
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._getIndexes();

              case 2:
                _context9.t0 = seqName;
                indexEntry = _context9.sent.name[_context9.t0];

                if (indexEntry) {
                  _context9.next = 6;
                  break;
                }

                return _context9.abrupt('return', undefined);

              case 6:
                return _context9.abrupt('return', this._fetchFromIndexEntry(indexEntry, min, max));

              case 7:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getResiduesByName(_x6, _x7, _x8) {
        return _ref10.apply(this, arguments);
      }

      return getResiduesByName;
    }()
  }, {
    key: 'getSequence',
    value: function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
        var _args10 = arguments;
        return _regenerator2.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                return _context10.abrupt('return', this.getResiduesByName.apply(this, _args10));

              case 1:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getSequence() {
        return _ref11.apply(this, arguments);
      }

      return getSequence;
    }()
  }, {
    key: '_fetchFromIndexEntry',
    value: function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee11(indexEntry) {
        var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var max = arguments[2];
        var end, position, readlen, residues;
        return _regenerator2.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                end = max;

                if (!(min < 0)) {
                  _context11.next = 3;
                  break;
                }

                throw new TypeError('regionStart cannot be less than 0');

              case 3:
                if (end === undefined || end > indexEntry.length) {
                  end = indexEntry.length;
                }

                if (!(min >= end)) {
                  _context11.next = 6;
                  break;
                }

                return _context11.abrupt('return', '');

              case 6:
                position = _faiOffset(indexEntry, min);
                readlen = _faiOffset(indexEntry, end) - position;

                if (!(readlen > this.chunkSizeLimit)) {
                  _context11.next = 10;
                  break;
                }

                throw new Error('chunkSizeLimit exceeded');

              case 10:
                residues = Buffer.allocUnsafe(readlen);
                _context11.next = 13;
                return this.fasta.read(residues, 0, readlen, position);

              case 13:
                residues = residues.toString('utf8').replace(/\s+/g, '');

                return _context11.abrupt('return', residues);

              case 15:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function _fetchFromIndexEntry(_x9) {
        return _ref12.apply(this, arguments);
      }

      return _fetchFromIndexEntry;
    }()
  }]);

  return IndexedFasta;
}();

module.exports = IndexedFasta;