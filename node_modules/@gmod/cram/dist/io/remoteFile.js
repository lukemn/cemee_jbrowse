'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fetch = require('cross-fetch');
var BufferCache = require('./bufferCache');

var RemoteFile = function () {
  function RemoteFile(source) {
    var _this = this;

    (0, _classCallCheck3.default)(this, RemoteFile);

    this.position = 0;
    this.url = source;
    this.cache = new BufferCache({
      fetch: function fetch(start, length) {
        return _this._fetch(start, length);
      }
    });
  }

  (0, _createClass3.default)(RemoteFile, [{
    key: '_fetch',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(position, length) {
        var headers, response, nodeBuffer, sizeMatch;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                headers = {};

                if (length < Infinity) {
                  headers.range = 'bytes=' + position + '-' + (position + length);
                } else if (length === Infinity && position !== 0) {
                  headers.range = 'bytes=' + position + '-';
                }
                _context.next = 4;
                return fetch(this.url, {
                  method: 'GET',
                  headers: headers,
                  redirect: 'follow',
                  mode: 'cors'
                });

              case 4:
                response = _context.sent;

                if (!(response.status === 200 && position === 0 || response.status === 206)) {
                  _context.next = 14;
                  break;
                }

                _context.t0 = Buffer;
                _context.next = 9;
                return response.arrayBuffer();

              case 9:
                _context.t1 = _context.sent;
                nodeBuffer = _context.t0.from.call(_context.t0, _context.t1);


                // try to parse out the size of the remote file
                sizeMatch = /\/(\d+)$/.exec(response.headers.map['content-range']);

                if (sizeMatch[1]) this._stat = { size: parseInt(sizeMatch[1], 10) };

                return _context.abrupt('return', nodeBuffer);

              case 14:
                throw new Error('HTTP ' + response.status + ' fetching ' + this.url);

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _fetch(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return _fetch;
    }()
  }, {
    key: 'read',
    value: function read(buffer) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
      var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      var readPosition = position;
      if (readPosition === null) {
        readPosition = this.position;
        this.position += length;
      }
      return this.cache.get(buffer, offset, length, position);
    }
  }, {
    key: 'readFile',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var response;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return fetch(this.url, {
                  method: 'GET',
                  redirect: 'follow',
                  mode: 'cors'
                });

              case 2:
                response = _context2.sent;
                _context2.t0 = Buffer;
                _context2.next = 6;
                return response.arrayBuffer();

              case 6:
                _context2.t1 = _context2.sent;
                return _context2.abrupt('return', _context2.t0.from.call(_context2.t0, _context2.t1));

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function readFile() {
        return _ref2.apply(this, arguments);
      }

      return readFile;
    }()
  }, {
    key: 'stat',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var buf;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this._stat) {
                  _context3.next = 6;
                  break;
                }

                buf = Buffer.allocUnsafe(10);
                _context3.next = 4;
                return this.read(buf, 0, 10, 0);

              case 4:
                if (this._stat) {
                  _context3.next = 6;
                  break;
                }

                throw new Error('unable to determine size of file at ' + this.url);

              case 6:
                return _context3.abrupt('return', this._stat);

              case 7:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function stat() {
        return _ref3.apply(this, arguments);
      }

      return stat;
    }()
  }]);
  return RemoteFile;
}();

module.exports = RemoteFile;