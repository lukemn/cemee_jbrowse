'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('../util'),
    tinyMemoize = _require.tinyMemoize;

var CramCodec = require('./_base');

var ByteArrayStopCodec = function (_CramCodec) {
  (0, _inherits3.default)(ByteArrayStopCodec, _CramCodec);

  function ByteArrayStopCodec() {
    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var dataType = arguments[1];
    var instantiateCodec = arguments[2];
    (0, _classCallCheck3.default)(this, ByteArrayStopCodec);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ByteArrayStopCodec.__proto__ || (0, _getPrototypeOf2.default)(ByteArrayStopCodec)).call(this, parameters, dataType));

    _this.instantiateCodec = instantiateCodec;
    if (dataType !== 'byteArray') throw new TypeError('byteArrayLength does not support data type ' + dataType);
    return _this;
  }

  (0, _createClass3.default)(ByteArrayStopCodec, [{
    key: 'decode',
    value: function decode(slice, coreDataBlock, blocksByContentId, cursors) {
      var lengthCodec = this._getLengthCodec();
      var arrayLength = lengthCodec.decode(slice, coreDataBlock, blocksByContentId, cursors);

      var dataCodec = this._getDataCodec();
      var data = new Array(arrayLength);
      for (var i = 0; i < arrayLength; i += 1) {
        data[i] = dataCodec.decode(slice, coreDataBlock, blocksByContentId, cursors);
      }

      return data;
    }

    // memoize

  }, {
    key: '_getLengthCodec',
    value: function _getLengthCodec() {
      var encodingParams = this.parameters.lengthsEncoding;
      return this.instantiateCodec(encodingParams, 'int');
    }

    // memoize

  }, {
    key: '_getDataCodec',
    value: function _getDataCodec() {
      var encodingParams = this.parameters.valuesEncoding;

      return this.instantiateCodec(encodingParams, 'byte');
    }
  }]);
  return ByteArrayStopCodec;
}(CramCodec);

'_getLengthCodec _getDataCodec'.split(' ').forEach(function (method) {
  return tinyMemoize(ByteArrayStopCodec, method);
});

module.exports = ByteArrayStopCodec;