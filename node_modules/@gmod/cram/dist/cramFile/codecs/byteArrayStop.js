'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('../../errors'),
    CramBufferOverrunError = _require.CramBufferOverrunError,
    CramMalformedError = _require.CramMalformedError;

var CramCodec = require('./_base');

var ByteArrayStopCodec = function (_CramCodec) {
  (0, _inherits3.default)(ByteArrayStopCodec, _CramCodec);

  function ByteArrayStopCodec() {
    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var dataType = arguments[1];
    (0, _classCallCheck3.default)(this, ByteArrayStopCodec);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ByteArrayStopCodec.__proto__ || (0, _getPrototypeOf2.default)(ByteArrayStopCodec)).call(this, parameters, dataType));

    if (dataType === 'byteArray') {
      _this._decode = _this._decodeByteArray;
    } else {
      throw new TypeError('byteArrayStop codec does not support data type ' + dataType);
    }
    return _this;
  }

  (0, _createClass3.default)(ByteArrayStopCodec, [{
    key: 'decode',
    value: function decode(slice, coreDataBlock, blocksByContentId, cursors) {
      var blockContentId = this.parameters.blockContentId;

      var contentBlock = blocksByContentId[blockContentId];
      if (!contentBlock) throw new CramMalformedError('no block found with content ID ' + blockContentId);
      var cursor = cursors.externalBlocks.getCursor(blockContentId);
      return this._decode(contentBlock, cursor);
    }
  }, {
    key: '_decodeByteArray',
    value: function _decodeByteArray(contentBlock, cursor) {
      var dataBuffer = contentBlock.content;
      var stopByte = this.parameters.stopByte;
      // scan to the next stop byte

      var startPosition = cursor.bytePosition;
      var stopPosition = cursor.bytePosition;
      while (dataBuffer[stopPosition] !== stopByte && stopPosition < dataBuffer.length) {
        if (stopPosition === dataBuffer.length) {
          throw new CramBufferOverrunError('byteArrayStop reading beyond length of data buffer?');
        }
        stopPosition += 1;
      }
      cursor.bytePosition = stopPosition + 1;
      var data = dataBuffer.slice(startPosition, stopPosition);
      return data;
    }
  }]);
  return ByteArrayStopCodec;
}(CramCodec);

module.exports = ByteArrayStopCodec;