'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('../../errors'),
    CramUnimplementedError = _require.CramUnimplementedError;

var CramCodec = require('./_base');

var SubexpCodec = function (_CramCodec) {
  (0, _inherits3.default)(SubexpCodec, _CramCodec);

  function SubexpCodec() {
    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var dataType = arguments[1];
    (0, _classCallCheck3.default)(this, SubexpCodec);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SubexpCodec.__proto__ || (0, _getPrototypeOf2.default)(SubexpCodec)).call(this, parameters, dataType));

    if (_this.dataType !== 'int') {
      throw new CramUnimplementedError(_this.dataType + ' decoding not yet implemented by SUBEXP codec');
    }
    return _this;
  }

  (0, _createClass3.default)(SubexpCodec, [{
    key: 'decode',
    value: function decode(slice, coreDataBlock, blocksByContentId, cursors) {
      var numLeadingOnes = 0;
      while (this._getBits(coreDataBlock.content, cursors.coreBlock, 1)) {
        numLeadingOnes += 1;
      }var b = void 0;
      var n = void 0;
      if (numLeadingOnes === 0) {
        b = this.parameters.K;
        n = this._getBits(coreDataBlock.content, cursors.coreBlock, b);
      } else {
        b = numLeadingOnes + this.parameters.K - 1;
        n = 1 << b | this._getBits(coreDataBlock.content, cursors.coreBlock, b);
      }

      return n - this.parameters.offset;
    }
  }]);
  return SubexpCodec;
}(CramCodec);

module.exports = SubexpCodec;