'use strict';var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require('babel-runtime/helpers/createClass');var _createClass3 = _interopRequireDefault(_createClass2);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var fs =
// eslint-disable-next-line camelcase
typeof __webpack_require__ !== 'function' ? require('fs-extra') : undefined;

// LocalFile is pretty much just an implementation of the node 10+ fs.promises filehandle,
// we can switch to that when the API is stable
var LocalFile = function () {
  function LocalFile(path) {(0, _classCallCheck3.default)(this, LocalFile);
    this.fdPromise = fs.open(path, 'r');
    this.path = path;
  }(0, _createClass3.default)(LocalFile, [{ key: 'read', value: function () {var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(

      buf, offset, length, position) {var fd, ret;return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (
                  this.fdPromise);case 2:fd = _context.sent;_context.next = 5;return (
                  fs.read(fd, buf, offset, length, position));case 5:ret = _context.sent;return _context.abrupt('return',
                ret);case 7:case 'end':return _context.stop();}}}, _callee, this);}));function read(_x, _x2, _x3, _x4) {return _ref.apply(this, arguments);}return read;}() }, { key: 'stat', value: function () {var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {var fd;return _regenerator2.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (



                  this.fdPromise);case 2:fd = _context2.sent;return _context2.abrupt('return',
                fs.fstat(fd));case 4:case 'end':return _context2.stop();}}}, _callee2, this);}));function stat() {return _ref2.apply(this, arguments);}return stat;}() }]);return LocalFile;}();



module.exports = LocalFile;