'use strict';var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);




// browserify-zlib, which is the zlib shim used by default in webpacked code,
// does not properly uncompress bgzf chunks that contain more than
// one bgzf block, so export an unzip function that uses pako directly
// if we are running in a browser.
var pakoUnzip = function () {var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(inputData) {var strm, pos, i, chunks, inflator, remainingInput, result;return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            strm = void 0;
            pos = 0;
            i = 0;
            chunks = [];
            inflator = void 0;case 5:

            remainingInput = inputData.slice(pos);
            inflator = new Inflate();
            strm = inflator.strm;
            inflator.push(remainingInput, Z_SYNC_FLUSH);if (!
            inflator.err) {_context.next = 11;break;}throw new Error(inflator.msg);case 11:

            pos += strm.next_in;
            chunks[i] = Buffer.from(inflator.result);
            i += 1;case 14:if (
            strm.avail_in) {_context.next = 5;break;}case 15:

            result = Buffer.concat(chunks);return _context.abrupt('return',
            result);case 17:case 'end':return _context.stop();}}}, _callee, this);}));return function pakoUnzip(_x) {return _ref.apply(this, arguments);};}();


// in node, just use the native unzipping with Z_SYNC_FLUSH
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var zlib = require('zlib');var gunzip = require('util.promisify')(zlib.gunzip);var _require = require('pako'),Z_SYNC_FLUSH = _require.Z_SYNC_FLUSH,Inflate = _require.Inflate;function nodeUnzip(input) {
  return gunzip(input, {
    finishFlush: (zlib.constants || zlib).Z_SYNC_FLUSH });

}

module.exports = {
  unzip: typeof __webpack_require__ === 'function' ? pakoUnzip : nodeUnzip, // eslint-disable-line
  nodeUnzip: nodeUnzip,
  pakoUnzip: pakoUnzip };